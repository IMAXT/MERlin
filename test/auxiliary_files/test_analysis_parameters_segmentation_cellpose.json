{
    "analysis_tasks": [
        {
            "task": "FiducialCorrelationWarp",
            "module": "merlin.analysis.warp",
            "analysis_name": "CellposeFiducialCorrelationWarp",
            "parameters": {
                "write_aligned_images": true
            }
        },
        {
            "task": "DeconvolutionPreprocess",
            "module": "merlin.analysis.preprocess",
            "analysis_name": "CellposeDeconvolutionPreprocess",
            "parameters": {
                "warp_task": "CellposeFiducialCorrelationWarp"
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "CellposeOptimize1",
            "parameters": {
                "preprocess_task": "CellposeDeconvolutionPreprocess",
                "warp_task": "CellposeFiducialCorrelationWarp",
                "fov_per_iteration": 2,
                "iteration_count": 2,
                "optimize_chromatic_correction": false
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "CellposeOptimize2",
            "parameters": {
                "preprocess_task": "CellposeDeconvolutionPreprocess",
                "warp_task": "CellposeFiducialCorrelationWarp",
                "fov_per_iteration": 2,
                "iteration_count": 2,
                "optimize_chromatic_correction": false,
                "previous_iteration": "CellposeOptimize1"
            }
        },
        {
            "task": "Decode",
            "module": "merlin.analysis.decode",
            "analysis_name": "CellposeDecode",
            "parameters": {
                "preprocess_task": "CellposeDeconvolutionPreprocess",
                "optimize_task": "CellposeOptimize2",
                "global_align_task": "CellposeSimpleGlobalAlignment",
                "crop_width": 10,
                "remove_z_duplicated_barcodes": true,
                "z_duplicate_zPlane_threshold": 1,
                "z_duplicate_xy_pixel_threshold": 1.414
            }
        },
        {
            "task": "SimpleGlobalAlignment",
            "module": "merlin.analysis.globalalign",
            "analysis_name": "CellposeSimpleGlobalAlignment"
        },
        {
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "analysis_name": "CellposeGenerateMosaic",
            "parameters": {
                "global_align_task": "CellposeSimpleGlobalAlignment",
                "warp_task": "CellposeFiducialCorrelationWarp"
            }
        },
        {
            "task": "FilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "analysis_name": "CellposeFilterBarcodes",
            "parameters": {
                "decode_task": "CellposeDecode",
                "area_threshold": 5,
                "intensity_threshold": 1
            }
        },
        {
            "task": "GenerateAdaptiveThreshold",
            "module": "merlin.analysis.filterbarcodes",
            "analysis_name": "CellposeGenerateAdaptiveThreshold",
            "parameters": {
                "decode_task": "CellposeDecode",
                "run_after_task": "CellposeDecode"
            }
        },
        {
            "task": "AdaptiveFilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "analysis_name": "CellposeAdaptiveFilterBarcodes",
            "parameters": {
                "decode_task": "CellposeDecode",
                "adaptive_task": "CellposeGenerateAdaptiveThreshold"
            }
        },
        {
            "task": "ExportBarcodes",
            "module": "merlin.analysis.exportbarcodes",
            "analysis_name": "CellposeExportBarcodes",
            "parameters": {
                "filter_task": "CellposeFilterBarcodes"
            }
        },
        {
            "task": "PlotPerformance",
            "module": "merlin.analysis.plotperformance",
            "analysis_name": "CellposePlotPerformance",
            "parameters": {
                "preprocess_task": "CellposeDeconvolutionPreprocess",
                "optimize_task": "CellposeOptimize2",
                "decode_task": "CellposeDecode",
                "filter_task": "CellposeAdaptiveFilterBarcodes",
                "global_align_task": "CellposeSimpleGlobalAlignment"
            }
        },
        {
            "task": "MachineLearningSegment",
            "module": "merlin.analysis.segment",
            "analysis_name": "CellposeSegment",
            "parameters": {
                "warp_task": "CellposeFiducialCorrelationWarp",
                "global_align_task": "CellposeSimpleGlobalAlignment",
                "method": "cellpose",
                "diameter": 50,
                "compartment_channel_name": "DAPI"
            }
        },
        {
            "task": "CleanCellBoundaries",
            "module": "merlin.analysis.segment",
            "analysis_name": "CellposeCleanCellBoundaries",
            "parameters": {
                "segment_task": "CellposeSegment",
                "global_align_task": "CellposeSimpleGlobalAlignment"
            }
        },
        {
            "task": "CombineCleanedBoundaries",
            "module": "merlin.analysis.segment",
            "analysis_name": "CellposeCombineCleanedBoundaries",
            "parameters": {
                "cleaning_task": "CellposeCleanCellBoundaries"
            }
        },
        {
            "task": "RefineCellDatabases",
            "module": "merlin.analysis.segment",
            "analysis_name": "CellposeRefineCellDatabases",
            "parameters": {
                "segment_task": "CellposeSegment",
                "combine_cleaning_task": "CellposeCombineCleanedBoundaries"
            }
        },
        {
            "task": "PartitionBarcodes",
            "module": "merlin.analysis.partition",
            "analysis_name": "CellposePartitionBarcodes",
            "parameters": {
                "filter_task": "AdaptiveFilterBarcodes",
                "assignment_task": "CellposeRefineCellDatabases",
                "alignment_task": "CellposeSimpleGlobalAlignment"
            }
        },
        {
            "task": "ExportPartitionedBarcodes",
            "module": "merlin.analysis.partition",
            "analysis_name": "CellposeExportPartitionedBarcodes",
            "parameters": {
                "partition_task": "CellposePartitionBarcodes"
            }
        },
        {
            "task": "ExportCellMetadata",
            "module": "merlin.analysis.segment",
            "analysis_name": "CellposeExportCellMetadata",
            "parameters": {
                "segment_task": "CellposeRefineCellDatabases"
            }
        },
        {
            "task": "SumSignal",
            "module": "merlin.analysis.sequential",
            "analysis_name": "CellposeSumSignal",   
            "parameters": {
                "z_index": 0,
                "apply_highpass": true,
                "warp_task": "CellposeFiducialCorrelationWarp",
                "highpass_sigma": 5,
                "segment_task": "CellposeRefineCellDatabases",
                "global_align_task": "CellposeSimpleGlobalAlignment"
            }
        },
        {
            "task": "ExportSumSignals",
            "module": "merlin.analysis.sequential",
            "analysis_name": "CellposeExportSumSignals",
            "parameters": {
                "sequential_task": "CellposeSumSignal"
            }
        }

    ]

}
